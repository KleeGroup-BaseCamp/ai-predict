package io.vertigo.ai.example.telstra.dao;

import javax.inject.Inject;

import io.vertigo.core.lang.Generated;
import io.vertigo.core.node.Node;
import io.vertigo.datamodel.task.definitions.TaskDefinition;
import io.vertigo.datamodel.task.model.Task;
import io.vertigo.datamodel.task.model.TaskBuilder;
import io.vertigo.datastore.entitystore.EntityStoreManager;
import io.vertigo.datastore.impl.dao.DAO;
import io.vertigo.datastore.impl.dao.StoreServices;
import io.vertigo.datamodel.smarttype.SmartTypeManager;
import io.vertigo.datamodel.task.TaskManager;
import io.vertigo.ai.example.telstra.domain.ResourceTypeTrain;

/**
 * This class is automatically generated.
 * DO NOT EDIT THIS FILE DIRECTLY.
 */
@Generated
public final class ResourceTypeTrainDAO extends DAO<ResourceTypeTrain, java.lang.Long> implements StoreServices {

	/**
	 * Contructeur.
	 * @param entityStoreManager Manager de persistance
	 * @param taskManager Manager de Task
	 * @param smartTypeManager SmartTypeManager
	 */
	@Inject
	public ResourceTypeTrainDAO(final EntityStoreManager entityStoreManager, final TaskManager taskManager, final SmartTypeManager smartTypeManager) {
		super(ResourceTypeTrain.class, entityStoreManager, taskManager, smartTypeManager);
	}


	/**
	 * Creates a taskBuilder.
	 * @param name  the name of the task
	 * @return the builder 
	 */
	private static TaskBuilder createTaskBuilder(final String name) {
		final TaskDefinition taskDefinition = Node.getNode().getDefinitionSpace().resolve(name, TaskDefinition.class);
		return Task.builder(taskDefinition);
	}

	/**
	 * Execute la tache TkBulkCreateResourceTypeTrain.
	 * @param resourceTypeTrainList DtList de ResourceTypeTrain
	*/
	@io.vertigo.datamodel.task.proxy.TaskAnnotation(
			dataSpace = "train",
			name = "TkBulkCreateResourceTypeTrain",
			request = "INSERT INTO RESOURCE_TYPE_TRAIN (ID, CODE, RESOURCE_TYPE) values (#resourceTypeTrainList.id#, #resourceTypeTrainList.code#, #resourceTypeTrainList.resourceType#)",
			taskEngineClass = io.vertigo.basics.task.TaskEngineProcBatch.class)
	public void bulkCreateResourceTypeTrain(@io.vertigo.datamodel.task.proxy.TaskInput(name = "resourceTypeTrainList", smartType = "STyDtResourceTypeTrain") final io.vertigo.datamodel.structure.model.DtList<io.vertigo.ai.example.telstra.domain.ResourceTypeTrain> resourceTypeTrainList) {
		final Task task = createTaskBuilder("TkBulkCreateResourceTypeTrain")
				.addValue("resourceTypeTrainList", resourceTypeTrainList)
				.addContextProperty("connectionName", io.vertigo.datastore.impl.dao.StoreUtil.getConnectionName("train"))
				.build();
		getTaskManager().execute(task);
	}

	/**
	 * Execute la tache TkLoadResourceType.
	 * @param resourceTypeIds List de Long
	 * @return DtList de ResourceTypeTrain dtcResourceTypeTrain
	*/
	@io.vertigo.datamodel.task.proxy.TaskAnnotation(
			name = "TkLoadResourceType",
			request = "select * from RESOURCE_TYPE where ID in (#resourceTypeIds.rownum#);",
			taskEngineClass = io.vertigo.basics.task.TaskEngineSelect.class)
	@io.vertigo.datamodel.task.proxy.TaskOutput(smartType = "STyDtResourceTypeTrain")
	public io.vertigo.datamodel.structure.model.DtList<io.vertigo.ai.example.telstra.domain.ResourceTypeTrain> loadResourceType(@io.vertigo.datamodel.task.proxy.TaskInput(name = "resourceTypeIds", smartType = "STyId") final java.util.List<Long> resourceTypeIds) {
		final Task task = createTaskBuilder("TkLoadResourceType")
				.addValue("resourceTypeIds", resourceTypeIds)
				.build();
		return getTaskManager()
				.execute(task)
				.getResult();
	}

}
